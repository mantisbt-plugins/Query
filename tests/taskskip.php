<?php
error_reporting(-1); //turn on errorreporting

require_once( '../../core.php' );

/** Includes for PHP excel * */
ini_set('include_path', ini_get('include_path') . ';G:\Classes\\');

include 'PHPExcel.php';
require_once 'PHPExcel/IOFactory.php';
include 'PHPExcel/Writer/Excel2007.php';
require_once 'PHPExcel/Cell/AdvancedValueBinder.php';

# This creates a KPI export of all complaints created last week

//PHPExcel_Cell::setValueBinder( new PHPExcel_Cell_AdvancedValueBinder() );

#remove for production untill here
# This creates an excel file with monthly KPI tasks per project

# -- functions --

if (!function_exists('getRealname')) {

    function getRealname($id) {
        if ($id <> 0) {
            $q = db_query ("SELECT * FROM mantis_user_table WHERE id = $id");
            $r = db_fetch_array($q);
            return $r['realname'];
        }
        else {
            return '';
        }
    }

}

if (!function_exists('getGroupN')) {

    function getGroupN($id) {
        if ($id <> 0) {
            $q = db_query ("SELECT * FROM mantis_plugin_Usergroups_groups_table WHERE group_id = $id");
            $r = db_fetch_array($q);
            return $r['group_name'];
        }
        else {
            return '';
        }
    }

}

if (!function_exists('GetProject')) {

    function GetProject($id) {
            $q = db_query ("SELECT * FROM mantis_project_table WHERE id = $id");
            $r = db_fetch_array($q);
            return $r['name'];
        }
}

if (!function_exists('CleanStr')) {

    function CleanStr($str) {
        $nstr = str_replace(config_get('plugin_Query_separator', 'Query'), " ", $str);
        $nstr = str_replace("\n", " ", $nstr);
        $nstr = str_replace("\r", " ", $nstr);
		$nstr = trim($nstr);
        return $nstr;
    }
}

//Definitions
$filename = date(YmdHis) . '.xlsx';
$today = date('Y-m-d');
$thisyear = date('Y');
$thismonth = date('m');
$lastmonth = date('m') - 1;
$now = strtotime($today);
$startofthisyear = strtotime($thisyear . '-1-1');
$pastmonth = strtotime($thisyear . '-' . $lastmonth);

#check if the project_id is set
if (!isset($project_id)) {
    $project_id = 10;
}


#create Excel
$objPHPExcel = new PHPExcel();
// Set properties
$objPHPExcel->getProperties()->setCreator("SCM");
$objPHPExcel->getProperties()->setLastModifiedBy("SCM");
$objPHPExcel->getProperties()->setTitle("SCM KPI");
$objPHPExcel->getProperties()->setSubject("SCM KPI");
$objPHPExcel->getProperties()->setDescription("Report generated by SCM");

//border definitions
$styleThinBlackBorderOut = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        )
    ),
);
$styleThinBlackBorderAll = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        ),
        'inside' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        )
    ),
);
$styleThickBlackBorderOut = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THICK,
            'color' => array('argb' => 'FF000000'),
        )
    ),
);

$styleThinBlackBorderHor = array(
    'borders' => array(
        'bottom' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        ),
        'inside' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        )
    ),
);


/* new sheet */

$objPHPExcel->setActiveSheetIndex(0);

//set column widths
$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth('5');
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth('10');
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth('40');
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth('10');
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth('40');
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth('10');
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth('20');
$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth('20');
$objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth('20');
$objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth('20');
$objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth('10');


//set cell data
$objPHPExcel->getActiveSheet()->SetCellValue('A1', 'Project');
$objPHPExcel->getActiveSheet()->SetCellValue('B1', 'Complaint');
$objPHPExcel->getActiveSheet()->SetCellValue('C1', 'Complaint summary');
$objPHPExcel->getActiveSheet()->SetCellValue('D1', 'Task ID');
$objPHPExcel->getActiveSheet()->SetCellValue('E1', 'Task Title');
$objPHPExcel->getActiveSheet()->SetCellValue('F1', 'Task Group');
$objPHPExcel->getActiveSheet()->SetCellValue('G1', 'Completed By');
$objPHPExcel->getActiveSheet()->SetCellValue('H1', 'Duedate');
$objPHPExcel->getActiveSheet()->SetCellValue('I1', 'Completed');
$objPHPExcel->getActiveSheet()->SetCellValue('J1', 'Resolved in days');
$objPHPExcel->getActiveSheet()->SetCellValue('K1', 'OK/NOK');

$objPHPExcel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

$query = "select task_group,task_completed_by,task_id,task_due,task_completed,bug_id, project_id, summary, task_title
from mantis_plugin_Tasks_defined_table
join mantis_bug_table as bt on bt.id = mantis_plugin_Tasks_defined_table.bug_id
where mantis_plugin_Tasks_defined_table.task_completed <> '0000-00-00 00:00:00'
AND task_completed_by <> ''
order by project_id, task_completed_by";
$results = db_query ($query);

$i = 2; //start line
#loop complaints

    while ($r = db_fetch_array($results)) {

       $datediff = strtotime($r['task_completed']) - strtotime($r['task_due']);
       $days= floor($datediff/(60*60*24));

       if ($days > 0) {
           $ok = 'NOK';
    	   $objPHPExcel->getActiveSheet()->getStyle('K'.$i)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		   $objPHPExcel->getActiveSheet()->getStyle('K'.$i)->getFill()->getStartColor()->setARGB('ec0c0e');
       }
       else {
           $ok = 'OK';
    	   $objPHPExcel->getActiveSheet()->getStyle('K'.$i)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		   $objPHPExcel->getActiveSheet()->getStyle('K'.$i)->getFill()->getStartColor()->setARGB('0cab31');
		   }
            $objPHPExcel->getActiveSheet()->SetCellValue('A' . $i, GetProject($r['project_id']));
            $objPHPExcel->getActiveSheet()->SetCellValue('B' . $i, $r['bug_id']);
            $objPHPExcel->getActiveSheet()->SetCellValue('C' . $i, CleanStr($r['summary']));
            $objPHPExcel->getActiveSheet()->SetCellValue('D' . $i, $r['task_id']);
			$objPHPExcel->getActiveSheet()->SetCellValue('E' . $i, CleanStr($r['task_title']));
			$objPHPExcel->getActiveSheet()->SetCellValue('F' . $i, getGroupN($r['task_group']));
            $objPHPExcel->getActiveSheet()->SetCellValue('G' . $i, getRealname($r['task_completed_by']));
            $objPHPExcel->getActiveSheet()->SetCellValue('H' . $i, date("Y-m-d", strtotime($r['task_due'])));
            $objPHPExcel->getActiveSheet()->SetCellValue('I' . $i, date("Y-m-d", strtotime($r['task_completed'])));
            $objPHPExcel->getActiveSheet()->SetCellValue('J' . $i, $days);
            $objPHPExcel->getActiveSheet()->SetCellValue('K' . $i, $ok);

            $i++;
    }


//set fonts
$objPHPExcel->getActiveSheet()->getStyle('A1:K1')->getFont()->setSize(10);
$objPHPExcel->getActiveSheet()->getStyle('A1:K1')->getFont()->setBold(true);
$objPHPExcel->getActiveSheet()->getStyle('A2:K' . $i)->getFont()->setSize(10);

//set borders
$objPHPExcel->getActiveSheet()->getStyle('A1:K1')->applyFromArray($styleThinBlackBorderAll);

// Rename sheet
$objPHPExcel->getActiveSheet()->setTitle('Coordinator');

//set pagebreaks
$objPHPExcel->getActiveSheet()->setBreak('A30', PHPExcel_Worksheet::BREAK_ROW);
$objPHPExcel->getActiveSheet()->setBreak('K30', PHPExcel_Worksheet::BREAK_COLUMN);

//set page orientation and papersize
$objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
$objPHPExcel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
$objPHPExcel->getActiveSheet()->getPageSetup()->setFitToWidth(1);
$objPHPExcel->getActiveSheet()->getPageSetup()->setFitToHeight(0);
// End sheet

//Autofilter
$objPHPExcel->getActiveSheet()->setAutoFilter('A1:K'.$i);

//set activesheet back to first one
$objPHPExcel->setActiveSheetIndex(0);

$fullfile = config_get('plugin_Query_download_location', 'Query');
$fullfile .= $filename;

//save it
$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save($fullfile);

//mail it
//$to = 'dennis.geus@stahl.com';
  
  $from = config_get('plugin_Query_from_address', 'Query');
  $recipients = explode(",", $target);
  #now retrieve email addresses and fill the TO variable
  $fields = count($recipients);
  
  
  $to = '';
  # now create the to address
  for ($i = 0; $i < $fields; $i++) {
  if ($i > 0) {
  $to .= ",";
  }
  $username = $recipients[$i];
  $domain = strstr($username, '@');
  if (empty($domain)) {
  $userid = user_get_id_by_name($username);
  $t_email = user_get_email($userid);
  }
  else {
  $t_email = $username;
  }
  if ($t_email <> '') {
  $to .= $t_email;
  }
  }
  if ($to == '') {
  return false;
  }
  
  $today = date("F j, Y, g:i a");
  $body = lang_get('plugin_query_body') . " \n\n";
  $body .= $filename . " \n\n";
  $body .= lang_get('plugin_query_date') . " \n\n";
  $body .= $today;

  // email fields: to, from, subject, and so on
  $subject = "SCM-Report :" . $schedule_name;
  $message = date("Y.m.d H:i:s") . "\n 1 attachment";
  $headers = "From: $from";
  $headers.="Return-Path:$from\r\n";

  // boundary
  $semi_rand = md5(time());
  $mime ary = "==Multipart_Boundary_x{$semi_rand}x";

  // headers for attachment
  $headers .= "\nMIME-Version: 1.0\n" . "Content-Type: multipart/mixed;\n" . " boundary=\"{$mime ary}\"";

  // multipart boundary
  $message = "--{$mime ary}\n" . "Content-Type: text/plain; charset=\"iso-8859-1\"\n" .
  "Content-Transfer-Encoding: 7bit\n\n" . $message . "\n\n";

  // preparing attachment
  if (is_file($fullfile)) {
  $message .= "--{$mime ary}\n";
  $fp = @fopen($fullfile, "rb");
  $data = @fread($fp, filesize($fullfile));
  @fclose($fp);
  $data = chunk_split(base64_encode($data));
  $message .= "Content-Type: application/octet-stream; name=\"" . basename($filename) . "\"\n" .
  "Content-Description: " . basename($filename) . "\n" .
  "Content-Disposition: attachment;\n" . " filename=\"" . basename($filename) . "\"; size=" . filesize($fullfile) . ";\n" .
  "Content-Transfer-Encoding: base64\n\n" . $data . "\n\n";
  }
  else {
  return false;
  }
  $returnpath = "-f" . $from;
//  mail($to, $subject, $message, $headers, $returnpath);
mail("dennis.geus@stahl.com", $subject, $message, $headers, $returnpath);

#and remove it
unlink($fullfile);

$objPHPExcel->disconnectWorksheets();
unset($objPHPExcel);
